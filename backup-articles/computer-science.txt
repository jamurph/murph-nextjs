Computers are responsible for an increasingly large stake of modern life.

Similarly, "Computer Science" as a discipline seems to be growing exponentially.

A Computer Scientist might help build websites, sequence the human genome, create algorithms to diagnose diseases and plan treatment, prove mathematical theorems, and much more. Each of these applications requires knowledge of both the domain and the use of computers.

So, where exactly does the "computer science" begin and end?

## What's in a name?
In the fifties, a burgeoning field was having somewhat of an identity crisis: nobody knew what, exactly, to call it or its practitioners.

Different ideas for what to call professionals in the field were posited including: comptologist, datamatic, applied meta-mathematician, turingineer, applied epistemologist, and, my personal favorite, flow-charts-man.

Somehow, everyone landed on Computer Scientist.

Consider this reasoning:

> **Wherever there are phenomena, there can be a science to describe and explain those phenomena. Thus, the simplest (and correct) answer to "What is botany?" is "Botany is the study of plants". And zoology is the study of animals, astronomy the study of stars, and so on. Phenomena breed sciences.** 
>
> **There are computers. Ergo, computer science is the study of computers. The phenomena surrounding computers are varied, complex, rich. [...] Computer science is the study of the phenomena surrounding computers.**
>
> &ndash; Allen Newell, Alan Perlis, and Herbert Simon from the 1967 issue of Science

This centers the field upon the use and phenomena of the tool.

However, I don't believe this is a good definition. Ought we not consider a process for diagnosing disease as a part of medicine? More fundamentally, by this definition, what could we exclude from computer science at all?

Let's forget the name for a moment.

## What do Computer Scientists do?
> **I consider computer science, in general, to be the art and science of representing and processing information and, in particular, processing information with the logical engines called automatic digital computers.**
>
> &ndash; George Forsythe in the January 1967 issue of CACM

That's it. "Computer Scientists" simply find ways to represent and process information.

This usually involves a machine - but it doesn't have to.

Machines themselves are simply useful derivations of humans. Even Alan Turing's introduction to his famous "Turing Machine" indicates this:

> **We may compare a man in the process of computing a real number to a machine which is only capable of a finite number of conditions** ...

It seems to me that Turing's successors became too preoccupied with the tool (who could blame them - it's a good tool) and lost what, in my opinion, is a better way to think about the field.

## That which we call a rose...

There was a proposed name that I think does a great deal to remove any confusion as to what the nature of "Computer Science" is. I also believe it does a great deal to explain exactly why the field has become so universally applicable (and hints at its future):

Applied Epistemology.

Epistemology is a branch of philosophy concerned with the nature of knowledge itself. It seeks to answer questions like "What is knowledge?", "What makes a belief justified?", and "How do we come to know things?".

There is a "Philosophy of X" for every field X. As a subbranch of philosophy, there is an "Epistemology of X" and, therefore, an "Applied Epistemology of X". 

This is why computer science is so pervasive.

## Don't get me wrong
The point isn't that Computer Science somehow "isn't a real science" or to posit "Applied Epistemology" as a replacement name (which would be awful).

The point is that the focus on the tool can be misleading. It has caused us to lump the vast _applications_ of computers into a single field of study. Both blacksmiths and builders use hammers.

Computation is becoming easier to manage and develop. Soon it might be just as easy (or more so) to teach doctors how to represent information and program as it is to teach Computer Scientists about medicine (or insurance!).

"Computational Thinking" and programming are being taught more broadly in K-12. Programming is becoming simpler as software becomes more decoupled from hardware, code frameworks become more sophisticated, and more open source libraries can be utilized. Heck, no-code and low-code platforms are the next crazes that attempt to abolish the need for programming in the first place (at least as we know it).

If anything, I think this understanding of Computer Science as "Applied Epistemology" would simply indicate, along with other signals mentioned above, that we are moving towards a tipping point where it becomes favorable for domain experts to learn computing, rather than Computer Scientists to learn the domains.




Sources:

"The Development of Computer Science" by Matti Tedre has an excellent historical overview. 